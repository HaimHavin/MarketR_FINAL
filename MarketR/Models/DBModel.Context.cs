//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketR.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarketREntities : DbContext
    {
        public MarketREntities()
            : base("name=MarketREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Deal_View> Deal_View { get; set; }
        public virtual DbSet<FolderPermission> FolderPermissions { get; set; }
        public virtual DbSet<PermissionForCreatingUser> PermissionForCreatingUsers { get; set; }
        public virtual DbSet<tblEventLog> tblEventLogs { get; set; }
        public virtual DbSet<CONDOR_ROW_INPUT> CONDOR_ROW_INPUT { get; set; }
        public virtual DbSet<FileHistory> FileHistories { get; set; }
        public virtual DbSet<FileRecord> FileRecords { get; set; }
        public virtual DbSet<FileCalculation> FileCalculations { get; set; }
        public virtual DbSet<NewFileRecord> NewFileRecords { get; set; }
        public virtual DbSet<NewFileRecordsCSV> NewFileRecordsCSVs { get; set; }
        public virtual DbSet<tbl_results_date_simulation> tbl_results_date_simulation { get; set; }
        public virtual DbSet<TBL_Simulation_DATE_CCY> TBL_Simulation_DATE_CCY { get; set; }
    
        public virtual ObjectResult<spFILE_UPLOAD_Result1> spFILE_UPLOAD(string fileName)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spFILE_UPLOAD_Result1>("spFILE_UPLOAD", fileNameParameter);
        }
    
        public virtual ObjectResult<sp_Simulate_Result1> sp_Simulate(Nullable<System.DateTime> date, string currency)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Simulate_Result1>("sp_Simulate", dateParameter, currencyParameter);
        }
    
        public virtual ObjectResult<sp_Simulate1_Result> sp_Simulate1(Nullable<System.DateTime> date, string currency)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Simulate1_Result>("sp_Simulate1", dateParameter, currencyParameter);
        }
    
        public virtual ObjectResult<GetResultView_Result> GetResultView(string currency, Nullable<int> band, Nullable<bool> nPV)
        {
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var bandParameter = band.HasValue ?
                new ObjectParameter("Band", band) :
                new ObjectParameter("Band", typeof(int));
    
            var nPVParameter = nPV.HasValue ?
                new ObjectParameter("NPV", nPV) :
                new ObjectParameter("NPV", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetResultView_Result>("GetResultView", currencyParameter, bandParameter, nPVParameter);
        }
    
        public virtual int UpdateSimLiquidate(Nullable<int> recordId, Nullable<bool> liquidate)
        {
            var recordIdParameter = recordId.HasValue ?
                new ObjectParameter("RecordId", recordId) :
                new ObjectParameter("RecordId", typeof(int));
    
            var liquidateParameter = liquidate.HasValue ?
                new ObjectParameter("Liquidate", liquidate) :
                new ObjectParameter("Liquidate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSimLiquidate", recordIdParameter, liquidateParameter);
        }
    }
}
